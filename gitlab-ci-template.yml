spec:
  inputs:
    microservice-name:
      type: string
    directory-name:
      type: string
    environment:
      type: string

---

image: "docker:latest"

services:
  - docker:dind

variables:
  DOCKER_BUILDKIT: 1
  IMAGE_BASE: "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME"

stages:
  - install
  - build
  - test
  - package
  - release
  - deploy


install-dependencies:
  stage: install
  script:
  - echo "Install dependencies"
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"

build-images:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [ "" ]
  script:
    - cp ${CI_PROJECT_DIR}/services.json ${CI_PROJECT_DIR}/$[[ inputs.directory-name ]]
    - /kaniko/executor
      --dockerfile "${CI_PROJECT_DIR}/$[[ inputs.directory-name ]]/Dockerfile"
      --context "${CI_PROJECT_DIR}/$[[ inputs.directory-name ]]"
      --destination "${IMAGE_BASE}/$[[ inputs.microservice-name ]]:$[[ inputs.environment ]]"
      --destination "${IMAGE_BASE}/$[[ inputs.microservice-name ]]:$CI_COMMIT_SHORT_SHA"
      # se pushea tanto el tag de la rama como el tag del commit
  needs:
  - job: install-dependencies
    artifacts: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"

unit-test:
  stage: test
  script:
  - echo "Unit test"
  needs:
  - job: build-images
    artifacts: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"

integration-test:
  stage: test
  script:
  - echo "Integration test"
  needs:
  - job: unit-test
  - job: build-images
    artifacts: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"

component-test:
  stage: test
  script:
  - echo "Component test"
  needs:
  - job: integration-test
  - job: build-images
    artifacts: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"

functional-test:
  stage: test
  script:
  - echo "Functional test"
  needs:
  - job: component-test
  - job: build-images
    artifacts: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"

package:
  stage: package
  script:
  - echo "Packaging"
  needs:
  - job: build-images
    artifacts: true
  - job: functional-test
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"

deliver-to-registry:
  stage: release
  script:
    # Pulleamos la imagen para que no se haga el build de nuevo
    - export IMAGE_TO_PULL="${IMAGE_BASE}/$[[ inputs.microservice-name ]]:$[[ inputs.environment ]]"
    - echo "${CI_PASSWORD}" | docker login -u "${CI_USERNAME}" --password-stdin $CI_REGISTRY
    - docker pull "$IMAGE_TO_PULL"
    # Ponemos las credenciales de Dockerhub
    - echo "${DOCKER_HUB_PASSWORD}" | docker login -u "${DOCKER_HUB_USERNAME}" --password-stdin
    - export DOCKERHUB_IMAGE="${DOCKER_HUB_USER}/$[[ inputs.microservice-name ]]:$[[ inputs.environment ]]"
    # Re-tag the image for Docker Hub
    - docker tag "$IMAGE_TO_PULL" "$DOCKERHUB_IMAGE"
    # Push the image to Docker Hub using Kaniko
    - docker push "$DOCKERHUB_IMAGE"
  needs:
  - job: package
    artifacts: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"

deploy-chart:
  stage: deploy
  script:
  - echo "Deploy chart to environment"
  needs:
  - job: deliver-to-registry
    artifacts: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"